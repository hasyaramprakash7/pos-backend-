const Order = require('../models/Order');
const Vendor = require('../models/Vendor'); 
const User = require('../models/User'); 
const MenuItem = require('../models/MenuItem');

// Helper function to calculate total amount (Uses real price from DB)
const calculateTotalAmount = async (items, vendorId) => {
Â  Â  let total = 0;
Â  Â  const itemIds = items.map(item => item.menuItemId);

Â  Â  // Fetch prices and names for all items in one query
Â  Â  const menuItems = await MenuItem.find({ 
Â  Â  Â  Â  _id: { $in: itemIds }, 
Â  Â  Â  Â  vendorId 
Â  Â  }).select('price name _id');
Â  Â  
Â  Â  if (menuItems.length !== itemIds.length) {
Â  Â  Â  Â  throw new Error('One or more menu items are invalid or unavailable.');
Â  Â  }

Â  Â  const priceMap = menuItems.reduce((acc, item) => {
Â  Â  Â  Â  acc[item._id.toString()] = { price: item.price, name: item.name };
Â  Â  Â  Â  return acc;
Â  Â  }, {});

Â  Â  items.forEach(item => {
Â  Â  Â  Â  const details = priceMap[item.menuItemId.toString()];
Â  Â  Â  Â  if (details) {
Â  Â  Â  Â  Â  Â  total += item.quantity * details.price;
Â  Â  Â  Â  Â  Â  item.name = details.name; // Denormalize the name into the order item for KOT/Billing view
Â  Â  Â  Â  }
Â  Â  });

Â  Â  return total;
};


// @desc Â  Â Server creates a new order
// @route Â  POST /api/orders
// @access Â Private (Server, Vendor role required)
exports.createOrder = async (req, res) => {
Â  Â  const { tableNumber, items } = req.body;
Â  Â  const vendorId = req.user.vendorId;
Â  Â  const serverId = req.user.id;

Â  Â  if (!tableNumber || !items || items.length === 0) {
Â  Â  Â  Â  return res.status(400).json({ msg: 'Order must include table number and at least one item.' });
Â  Â  }

Â  Â  // Basic validation for item structure
Â  Â  const isValid = items.every(item => item.menuItemId && item.quantity > 0 && item.itemTableNumber);
Â  Â  if (!isValid) {
Â  Â  Â  Â  return res.status(400).json({ msg: 'Invalid item data found in the order list.' });
Â  Â  }

Â  Â  try {
Â  Â  Â  Â  const totalAmount = await calculateTotalAmount(items, vendorId);

Â  Â  Â  Â  const newOrder = new Order({
Â  Â  Â  Â  Â  Â  tableNumber,
Â  Â  Â  Â  Â  Â  items,
Â  Â  Â  Â  Â  Â  server: serverId,
Â  Â  Â  Â  Â  Â  vendorId,
Â  Â  Â  Â  Â  Â  totalAmount,
Â  Â  Â  Â  Â  Â  status: 'Kitchen' // Immediately sent to kitchen upon creation
Â  Â  Â  Â  });

Â  Â  Â  Â  await newOrder.save();
Â  Â  Â  Â  res.status(201).json(newOrder);

Â  Â  } catch (err) {
Â  Â  Â  Â  console.error(err.message);
Â  Â  Â  Â  if (err.message.includes('invalid or unavailable')) {
Â  Â  Â  Â  Â  Â  return res.status(400).json({ msg: err.message });
Â  Â  Â  Â  }
Â  Â  Â  Â  res.status(500).send('Server error during order creation');
Â  Â  }
};

// @desc Â  Â Add new items to an existing order (KOT Add-on)
// @route Â  PUT /api/orders/:id/items
// @access Â Private (Server role required)
exports.addItemsToOrder = async (req, res) => {
Â  Â  const { newItems } = req.body;
Â  Â  const orderId = req.params.id;
Â  Â  const vendorId = req.user.vendorId;

Â  Â  if (!newItems || newItems.length === 0) {
Â  Â  Â  Â  return res.status(400).json({ msg: 'Must include at least one new item to add.' });
Â  Â  }

Â  Â  // Basic validation for item structure
Â  Â  const isValid = newItems.every(item => item.menuItemId && item.quantity > 0 && item.itemTableNumber);
Â  Â  if (!isValid) {
Â  Â  Â  Â  return res.status(400).json({ msg: 'Invalid item data found in the new items list.' });
Â  Â  }
Â  Â  
Â  Â  try {
Â  Â  Â  Â  let order = await Order.findOne({
Â  Â  Â  Â  Â  Â  _id: orderId,
Â  Â  Â  Â  Â  Â  vendorId
Â  Â  Â  Â  });

Â  Â  Â  Â  if (!order) {
Â  Â  Â  Â  Â  Â  return res.status(404).json({ msg: 'Order not found for this shop.' });
Â  Â  Â  Â  }

Â  Â  Â  Â  // Prevent modifying completed orders
Â  Â  Â  Â  if (order.status === 'Completed' || order.status === 'Billed') {
Â  Â  Â  Â  Â  Â  return res.status(400).json({ msg: `Cannot add items to an already ${order.status} order.` });
Â  Â  Â  Â  }

Â  Â  Â  Â  // Calculate price and denormalize names for NEW items
Â  Â  Â  Â  let newItemsTotal = await calculateTotalAmount(newItems, vendorId);

Â  Â  Â  Â  // Append new items and update total
Â  Â  Â  Â  order.items.push(...newItems);
Â  Â  Â  Â  order.totalAmount += newItemsTotal;

Â  Â  Â  Â  // Reset status to 'Kitchen' to notify kitchen staff of the add-on
Â  Â  Â  Â  if (order.status !== 'Kitchen' && order.status !== 'Pending') {
Â  Â  Â  Â  Â  Â  Â order.status = 'Kitchen'; 
Â  Â  Â  Â  }

Â  Â  Â  Â  await order.save();

Â  Â  Â  Â  res.json({ 
Â  Â  Â  Â  Â  Â  msg: `Successfully added ${newItems.length} items to the order. Total updated.`, 
Â  Â  Â  Â  Â  Â  order 
Â  Â  Â  Â  });

Â  Â  } catch (err) {
Â  Â  Â  Â  console.error(err.message);
Â  Â  Â  Â  if (err.message.includes('invalid or unavailable')) {
Â  Â  Â  Â  Â  Â  return res.status(400).json({ msg: err.message });
Â  Â  Â  Â  }
Â  Â  Â  Â  if (err.kind === 'ObjectId') {
Â  Â  Â  Â  Â  Â  return res.status(404).json({ msg: 'Order not found.' });
Â  Â  Â  Â  }
Â  Â  Â  Â  res.status(500).send('Server error during add-on operation');
Â  Â  }
};

// @desc Â  Â Kitchen gets pending/cooking orders
// @route Â  GET /api/orders/kitchen
// @access Â Private (Kitchen role required)
exports.getKitchenOrders = async (req, res) => {
Â  Â  const vendorId = req.user.vendorId;

Â  Â  try {
Â  Â  Â  Â  const orders = await Order.find({
Â  Â  Â  Â  Â  Â  vendorId,
Â  Â  Â  Â  Â  Â  status: { $in: ['Pending', 'Kitchen'] }
Â  Â  Â  Â  }).sort({ createdAt: 1 }); 

Â  Â  Â  Â  res.json(orders);
Â  Â  } catch (err) {
Â  Â  Â  Â  console.error(err.message);
Â  Â  Â  Â  res.status(500).send('Server error retrieving kitchen orders');
Â  Â  }
};

// @desc Â  Â Billing/Server gets active orders ready for billing/serving
// @route Â  GET /api/orders/billing
// @access Â Private (Billing, Server role required)
exports.getBillingOrders = async (req, res) => {
Â  Â  const vendorId = req.user.vendorId;

Â  Â  try {
Â  Â  Â  Â  // ðŸš¨ CRITICAL FIX: EXCLUDE 'Billed' orders to prevent phantom orders on the table selection screen.
Â  Â  Â  Â  const orders = await Order.find({
Â  Â  Â  Â  Â  Â  vendorId,
Â  Â  Â  Â  Â  Â  status: { $in: ['Ready', 'Served', 'Completed'] } 
Â  Â  Â  Â  }).sort({ tableNumber: 1, createdAt: 1 }); 

Â  Â  Â  Â  res.json(orders);
Â  Â  } catch (err) {
Â  Â  Â  Â  console.error(err.message);
Â  Â  Â  Â  res.status(500).send('Server error retrieving billing orders');
Â  Â  }
};

// @desc Â  Â Get details of a single order
// @route Â  GET /api/orders/:id
// @access Â Private (Server, Billing, Vendor roles)
exports.getOrderById = async (req, res) => {
Â  Â  const vendorId = req.user.vendorId;

Â  Â  try {
Â  Â  Â  Â  const order = await Order.findOne({
Â  Â  Â  Â  Â  Â  _id: req.params.id,
Â  Â  Â  Â  Â  Â  vendorId
Â  Â  Â  Â  });

Â  Â  Â  Â  if (!order) {
Â  Â  Â  Â  Â  Â  return res.status(404).json({ msg: 'Order not found for this shop.' });
Â  Â  Â  Â  }

Â  Â  Â  Â  res.json(order);
Â  Â  } catch (err) {
Â  Â  Â  Â  console.error(err.message);
Â  Â  Â  Â  if (err.kind === 'ObjectId') {
Â  Â  Â  Â  Â  Â  return res.status(404).json({ msg: 'Order not found.' });
Â  Â  Â  Â  }
Â  Â  Â  Â  res.status(500).send('Server error retrieving order details');
Â  Â  }
};

// @desc Â  Â Update order status
// @route Â  PUT /api/orders/:id/status
// @access Â Private (Kitchen, Server, Billing, Vendor roles)
exports.updateStatus = async (req, res) => {
Â  Â  const { newStatus } = req.body;
Â  Â  const vendorId = req.user.vendorId;
Â  Â  const userRole = req.user.role;
Â  Â  
Â  Â  // Define which roles are allowed to set which statuses
Â  Â  const allowedTransitions = {
Â  Â  Â  Â  Kitchen: ['Ready'], 
Â  Â  Â  Â  Server: ['Served'], 
Â  Â  Â  Â  Billing: ['Billed', 'Completed'], 
Â  Â  Â  Â  Vendor: ['Pending', 'Kitchen', 'Ready', 'Served', 'Billed', 'Completed'] 
Â  Â  };
Â  Â  
Â  Â  if (!newStatus || !allowedTransitions[userRole]?.includes(newStatus)) {
Â  Â  Â  Â  return res.status(400).json({ msg: `Invalid status or role (${userRole}) not authorized to set status to ${newStatus}.` });
Â  Â  }

Â  Â  try {
Â  Â  Â  Â  let order = await Order.findOne({
Â  Â  Â  Â  Â  Â  _id: req.params.id,
Â  Â  Â  Â  Â  Â  vendorId
Â  Â  Â  Â  });

Â  Â  Â  Â  if (!order) {
Â  Â  Â  Â  Â  Â  return res.status(404).json({ msg: 'Order not found for this shop.' });
Â  Â  Â  Â  }
Â  Â  Â  Â  
Â  Â  Â  Â  // Prevent setting a status that is chronologically backwards or already final
Â  Â  Â  Â  // NOTE: Vendor is allowed to reset status backwards for correction, but staff are not.
Â  Â  Â  Â  if (order.status === 'Completed' && userRole !== 'Vendor') {
Â  Â  Â  Â  Â  Â  Â return res.status(400).json({ msg: `Cannot change status of an already ${order.status} order.` });
Â  Â  Â  Â  }

Â  Â  Â  Â  order.status = newStatus;
Â  Â  Â  Â  await order.save();

Â  Â  Â  Â  res.json({ msg: `Order status updated to ${newStatus}`, order });

Â  Â  } catch (err) {
Â  Â  Â  Â  console.error(err.message);
Â  Â  Â  Â  if (err.kind === 'ObjectId') {
Â  Â  Â  Â  Â  Â  return res.status(404).json({ msg: 'Order not found.' });
Â  Â  Â  Â  }
Â  Â  Â  Â  res.status(500).send('Server error during status update');
Â  Â  }
};

// @desc Â  Â Vendor/Management gets completed (billed/closed) orders
// @route Â  GET /api/orders/completed
// @access Â Private (Vendor role required)
exports.getCompletedOrders = async (req, res) => {
Â  Â  const vendorId = req.user.vendorId;
Â  Â  
Â  Â  // Optional: Allow filtering by date range for better performance/usability
Â  Â  const { startDate, endDate } = req.query; 

Â  Â  try {
Â  Â  Â  Â  const query = {
Â  Â  Â  Â  Â  Â  vendorId,
Â  Â  Â  Â  Â  Â  // CORRECT: This correctly includes both Billed and Completed for reporting
Â  Â  Â  Â  Â  Â  status: { $in: ['Billed', 'Completed'] } 
Â  Â  Â  Â  };

Â  Â  Â  Â  // Apply date filtering
Â  Â  Â  Â  if (startDate && endDate) {
Â  Â  Â  Â  Â  Â  // Note: Ensuring endDate includes the whole day
Â  Â  Â  Â  Â  Â  const endOfDay = new Date(endDate);
Â  Â  Â  Â  Â  Â  endOfDay.setHours(23, 59, 59, 999); 

Â  Â  Â  Â  Â  Â  query.updatedAt = {
Â  Â  Â  Â  Â  Â  Â  Â  $gte: new Date(startDate),
Â  Â  Â  Â  Â  Â  Â  Â  $lte: endOfDay
Â  Â  Â  Â  Â  Â  };
Â  Â  Â  Â  }
Â  Â  Â  Â  
Â  Â  Â  Â  // Populate server details (optional, but useful for reports)
Â  Â  Â  Â  const orders = await Order.find(query)
Â  Â  Â  Â  Â  Â  .sort({ updatedAt: -1 }); 
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  
Â  Â  Â  Â  // Optional: Calculate total sales amount for the fetched orders
Â  Â  Â  Â  const totalSales = orders.reduce((acc, order) => acc + order.totalAmount, 0);

Â  Â  Â  Â  res.json({
Â  Â  Â  Â  Â  Â  count: orders.length,
Â  Â  Â  Â  Â  Â  totalSales: totalSales.toFixed(2),
Â  Â  Â  Â  Â  Â  orders: orders
Â  Â  Â  Â  });
Â  Â  } catch (err) { 
Â  Â  Â  Â  console.error(err.message);
Â  Â  Â  Â  res.status(500).send('Server error retrieving completed orders');
Â  Â  }
};